name: Push CI

on:
  push:
    branches:
      - main

jobs:
  push_tests:
    permissions: write-all
    name: Push E2E Tests
    runs-on: ubuntu-24.04

    services:
      mysql:
        image: mysql:8.0
        ports:
          - "3306:3306"
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: testdb
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpassword
        options: >-
          --health-cmd="mysqladmin ping --host=localhost --user=root --password=rootpassword"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout the test repository
        uses: actions/checkout@v4

      - name: Install Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Node.js 20.11.1
        uses: actions/setup-node@v4
        with:
          node-version: '20.11.1'
      
      - name: Install MySQL Client & Python Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-client
          python -m pip install --upgrade pip
          pip install mysql-connector-python

      - name: Wait for MySQL and Initialize Database
        run: python init_db.py
      
      - name: Create reports folder
        run: |
          mkdir -p reports/coverage
          mkdir -p reports/robotmetrics

      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -U -r requirements.txt
          npm install @playwright/test
          npx playwright install-deps
          rfbrowser init

      - name: Run the tests
        env:
          # For real testing environments these variables must be secret and not exposed.
          DB_NAME: testdb
          DB_USER: testuser
          DB_PASSWORD: testpassword
          DB_HOST: localhost
          DB_PORT: ${{ job.services.mysql.ports[3306] }}
        run: pabot --processes 4 -d ./reports --output output.xml -v HEADLESS:true -v PIPELINE:true --nostatusrc  --testlevelsplit ./tests
      
      - name: Metrics
        if: always()
        run: robotmetrics --input reports/ --output output.xml --metrics-report-name index.html
      
      - name: Generate Documentation
        if: always()
        run: python generate_docs.py

      - name: Upload Test Results Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            ./reports
            ./reports/coverage
            ./reports/robotmetrics
          retention-days: 3
          if-no-files-found: ignore

      - name: Upload Documentation Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: ./documentation
          retention-days: 3
          if-no-files-found: ignore

  deploy:
      needs: push_tests
      runs-on: ubuntu-latest
      permissions:
        pages: write      # to deploy to Pages
        id-token: write   # to verify the deployment originates from an appropriate source
      environment:
        name: github-pages
        url: ${{ steps.deployment.outputs.page_url }}

      steps:
        - name: Download documentation artifact
          uses: actions/download-artifact@v4
          with:
            name: documentation
            path: ./documentation

        - name: Setup Pages
          uses: actions/configure-pages@v5

        - name: Upload artifact
          uses: actions/upload-pages-artifact@v3
          with:
            path: './documentation'

        - name: Deploy to GitHub Pages
          id: deployment
          uses: actions/deploy-pages@v4
